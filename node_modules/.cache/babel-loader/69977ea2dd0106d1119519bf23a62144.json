{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports['default'] = syncHistoryWithStore;\n\nvar _reducer = require('./reducer');\n\nvar defaultSelectLocationState = function defaultSelectLocationState(state) {\n  return state.routing;\n};\n/**\n * This function synchronizes your history state with the Redux store.\n * Location changes flow from history to the store. An enhanced history is\n * returned with a listen method that responds to store updates for location.\n *\n * When this history is provided to the router, this means the location data\n * will flow like this:\n * history.push -> store.dispatch -> enhancedHistory.listen -> router\n * This ensures that when the store state changes due to a replay or other\n * event, the router will be updated appropriately and can transition to the\n * correct router state.\n */\n\n\nfunction syncHistoryWithStore(history, store) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$selectLocationSt = _ref.selectLocationState,\n      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,\n      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,\n      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla; // Ensure that the reducer is mounted on the store and functioning properly.\n\n\n  if (typeof selectLocationState(store.getState()) === 'undefined') {\n    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');\n  }\n\n  var initialLocation = void 0;\n  var isTimeTraveling = void 0;\n  var unsubscribeFromStore = void 0;\n  var unsubscribeFromHistory = void 0;\n  var currentLocation = void 0; // What does the store say about current location?\n\n  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {\n    var locationState = selectLocationState(store.getState());\n    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);\n  }; // Init initialLocation with potential location in store\n\n\n  initialLocation = getLocationInStore(); // If the store is replayed, update the URL in the browser to match.\n\n  if (adjustUrlOnReplay) {\n    var handleStoreChange = function handleStoreChange() {\n      var locationInStore = getLocationInStore(true);\n\n      if (currentLocation === locationInStore || initialLocation === locationInStore) {\n        return;\n      } // Update address bar to reflect store state\n\n\n      isTimeTraveling = true;\n      currentLocation = locationInStore;\n      history.transitionTo(_extends({}, locationInStore, {\n        action: 'PUSH'\n      }));\n      isTimeTraveling = false;\n    };\n\n    unsubscribeFromStore = store.subscribe(handleStoreChange);\n    handleStoreChange();\n  } // Whenever location changes, dispatch an action to get it in the store\n\n\n  var handleLocationChange = function handleLocationChange(location) {\n    // ... unless we just caused that location change\n    if (isTimeTraveling) {\n      return;\n    } // Remember where we are\n\n\n    currentLocation = location; // Are we being called for the first time?\n\n    if (!initialLocation) {\n      // Remember as a fallback in case state is reset\n      initialLocation = location; // Respect persisted location, if any\n\n      if (getLocationInStore()) {\n        return;\n      }\n    } // Tell the store to update by dispatching an action\n\n\n    store.dispatch({\n      type: _reducer.LOCATION_CHANGE,\n      payload: location\n    });\n  };\n\n  unsubscribeFromHistory = history.listen(handleLocationChange); // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves\n\n  if (history.getCurrentLocation) {\n    handleLocationChange(history.getCurrentLocation());\n  } // The enhanced history uses store as source of truth\n\n\n  return _extends({}, history, {\n    // The listeners are subscribed to the store instead of history\n    listen: function listen(listener) {\n      // Copy of last location.\n      var lastPublishedLocation = getLocationInStore(true); // Keep track of whether we unsubscribed, as Redux store\n      // only applies changes in subscriptions on next dispatch\n\n      var unsubscribed = false;\n      var unsubscribeFromStore = store.subscribe(function () {\n        var currentLocation = getLocationInStore(true);\n\n        if (currentLocation === lastPublishedLocation) {\n          return;\n        }\n\n        lastPublishedLocation = currentLocation;\n\n        if (!unsubscribed) {\n          listener(lastPublishedLocation);\n        }\n      }); // History 2.x listeners expect a synchronous call. Make the first call to the\n      // listener after subscribing to the store, in case the listener causes a\n      // location change (e.g. when it redirects)\n\n      if (!history.getCurrentLocation) {\n        listener(lastPublishedLocation);\n      } // Let user unsubscribe later\n\n\n      return function () {\n        unsubscribed = true;\n        unsubscribeFromStore();\n      };\n    },\n    // It also provides a way to destroy internal listeners\n    unsubscribe: function unsubscribe() {\n      if (adjustUrlOnReplay) {\n        unsubscribeFromStore();\n      }\n\n      unsubscribeFromHistory();\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","syncHistoryWithStore","_reducer","require","defaultSelectLocationState","state","routing","history","store","_ref","undefined","_ref$selectLocationSt","selectLocationState","_ref$adjustUrlOnRepla","adjustUrlOnReplay","getState","Error","initialLocation","isTimeTraveling","unsubscribeFromStore","unsubscribeFromHistory","currentLocation","getLocationInStore","useInitialIfEmpty","locationState","locationBeforeTransitions","handleStoreChange","locationInStore","transitionTo","action","subscribe","handleLocationChange","location","dispatch","type","LOCATION_CHANGE","payload","listen","getCurrentLocation","listener","lastPublishedLocation","unsubscribed","unsubscribe"],"sources":["F:/OpenClassRooms/p14 github pages/node_modules/react-router-redux/lib/sync.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports['default'] = syncHistoryWithStore;\n\nvar _reducer = require('./reducer');\n\nvar defaultSelectLocationState = function defaultSelectLocationState(state) {\n  return state.routing;\n};\n\n/**\n * This function synchronizes your history state with the Redux store.\n * Location changes flow from history to the store. An enhanced history is\n * returned with a listen method that responds to store updates for location.\n *\n * When this history is provided to the router, this means the location data\n * will flow like this:\n * history.push -> store.dispatch -> enhancedHistory.listen -> router\n * This ensures that when the store state changes due to a replay or other\n * event, the router will be updated appropriately and can transition to the\n * correct router state.\n */\nfunction syncHistoryWithStore(history, store) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$selectLocationSt = _ref.selectLocationState,\n      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,\n      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,\n      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;\n\n  // Ensure that the reducer is mounted on the store and functioning properly.\n  if (typeof selectLocationState(store.getState()) === 'undefined') {\n    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');\n  }\n\n  var initialLocation = void 0;\n  var isTimeTraveling = void 0;\n  var unsubscribeFromStore = void 0;\n  var unsubscribeFromHistory = void 0;\n  var currentLocation = void 0;\n\n  // What does the store say about current location?\n  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {\n    var locationState = selectLocationState(store.getState());\n    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);\n  };\n\n  // Init initialLocation with potential location in store\n  initialLocation = getLocationInStore();\n\n  // If the store is replayed, update the URL in the browser to match.\n  if (adjustUrlOnReplay) {\n    var handleStoreChange = function handleStoreChange() {\n      var locationInStore = getLocationInStore(true);\n      if (currentLocation === locationInStore || initialLocation === locationInStore) {\n        return;\n      }\n\n      // Update address bar to reflect store state\n      isTimeTraveling = true;\n      currentLocation = locationInStore;\n      history.transitionTo(_extends({}, locationInStore, {\n        action: 'PUSH'\n      }));\n      isTimeTraveling = false;\n    };\n\n    unsubscribeFromStore = store.subscribe(handleStoreChange);\n    handleStoreChange();\n  }\n\n  // Whenever location changes, dispatch an action to get it in the store\n  var handleLocationChange = function handleLocationChange(location) {\n    // ... unless we just caused that location change\n    if (isTimeTraveling) {\n      return;\n    }\n\n    // Remember where we are\n    currentLocation = location;\n\n    // Are we being called for the first time?\n    if (!initialLocation) {\n      // Remember as a fallback in case state is reset\n      initialLocation = location;\n\n      // Respect persisted location, if any\n      if (getLocationInStore()) {\n        return;\n      }\n    }\n\n    // Tell the store to update by dispatching an action\n    store.dispatch({\n      type: _reducer.LOCATION_CHANGE,\n      payload: location\n    });\n  };\n  unsubscribeFromHistory = history.listen(handleLocationChange);\n\n  // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves\n  if (history.getCurrentLocation) {\n    handleLocationChange(history.getCurrentLocation());\n  }\n\n  // The enhanced history uses store as source of truth\n  return _extends({}, history, {\n    // The listeners are subscribed to the store instead of history\n    listen: function listen(listener) {\n      // Copy of last location.\n      var lastPublishedLocation = getLocationInStore(true);\n\n      // Keep track of whether we unsubscribed, as Redux store\n      // only applies changes in subscriptions on next dispatch\n      var unsubscribed = false;\n      var unsubscribeFromStore = store.subscribe(function () {\n        var currentLocation = getLocationInStore(true);\n        if (currentLocation === lastPublishedLocation) {\n          return;\n        }\n        lastPublishedLocation = currentLocation;\n        if (!unsubscribed) {\n          listener(lastPublishedLocation);\n        }\n      });\n\n      // History 2.x listeners expect a synchronous call. Make the first call to the\n      // listener after subscribing to the store, in case the listener causes a\n      // location change (e.g. when it redirects)\n      if (!history.getCurrentLocation) {\n        listener(lastPublishedLocation);\n      }\n\n      // Let user unsubscribe later\n      return function () {\n        unsubscribed = true;\n        unsubscribeFromStore();\n      };\n    },\n\n\n    // It also provides a way to destroy internal listeners\n    unsubscribe: function unsubscribe() {\n      if (adjustUrlOnReplay) {\n        unsubscribeFromStore();\n      }\n      unsubscribeFromHistory();\n    }\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}